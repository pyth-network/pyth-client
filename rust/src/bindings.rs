/* automatically generated by rust-bindgen 0.59.2 */

#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
use solana_sdk::pubkey::Pubkey;
use serde::{Serialize, Deserialize};

pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const __bool_true_false_are_defined: u32 = 1;
pub const PC_MAGIC: u32 = 2712847316;
pub const PC_VERSION: u32 = 2;
pub const PC_MAX_SEND_LATENCY: u32 = 25;
pub const PC_PUBKEY_SIZE: u32 = 32;
pub const PC_MAP_TABLE_SIZE: u32 = 640;
pub const PC_COMP_SIZE: u32 = 32;
pub const PC_MAX_NUM_DECIMALS: u32 = 16;
pub const PC_PROD_ACC_SIZE: u32 = 512;
pub const PC_EXP_DECAY: i32 = -9;
pub const PC_HEAP_START: u64 = 12884901888;
pub const PC_PTYPE_UNKNOWN: u32 = 0;
pub const PC_PTYPE_PRICE: u32 = 1;
pub const PC_STATUS_UNKNOWN: u32 = 0;
pub const PC_STATUS_TRADING: u32 = 1;
pub const PC_STATUS_HALTED: u32 = 2;
pub const PC_STATUS_AUCTION: u32 = 3;
pub const PC_ACCTYPE_MAPPING: u32 = 1;
pub const PC_ACCTYPE_PRODUCT: u32 = 2;
pub const PC_ACCTYPE_PRICE: u32 = 3;
pub const PC_ACCTYPE_TEST: u32 = 4;
extern "C" {
    pub static sysvar_clock: [u64; 4usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Serialize, Deserialize)]
pub struct struct_pc_acc {
    pub magic_: u32,
    pub ver_: u32,
    pub type_: u32,
    pub size_: u32,
}
pub type pc_acc_t = struct_pc_acc;
#[repr(C)]
#[derive(Debug, Copy, Clone, Serialize, Deserialize)]
pub struct struct_pc_map_table {
    pub magic_: u32,
    pub ver_: u32,
    pub type_: u32,
    pub size_: u32,
    pub num_: u32,
    pub unused_: u32,
    pub next_: Pubkey,
    #[serde(skip_serializing, skip_deserializing, default = "default_mapping_products")]
    pub prod_: [Pubkey; 640usize],
}
pub type pc_map_table_t = struct_pc_map_table;
#[repr(C)]
#[derive(Debug, Copy, Clone, Serialize, Deserialize)]
pub struct struct_pc_prod {
    pub magic_: u32,
    pub ver_: u32,
    pub type_: u32,
    pub size_: u32,
    pub px_acc_: Pubkey,
}
pub type pc_prod_t = struct_pc_prod;
#[repr(C)]
#[derive(Debug, Copy, Clone, Serialize, Deserialize)]
pub struct struct_pc_price_info {
    pub price_: i64,
    pub conf_: u64,
    pub status_: u32,
    pub corp_act_status_: u32,
    pub pub_slot_: u64,
}
pub type pc_price_info_t = struct_pc_price_info;
#[repr(C)]
#[derive(Debug, Copy, Clone, Serialize, Deserialize)]
pub struct struct_pc_price_comp {
    pub pub_: Pubkey,
    pub agg_: pc_price_info_t,
    pub latest_: pc_price_info_t,
}
pub type pc_price_comp_t = struct_pc_price_comp;
#[repr(C)]
#[derive(Debug, Copy, Clone, Serialize, Deserialize)]
pub struct struct_pc_ema {
    pub val_: i64,
    pub numer_: i64,
    pub denom_: i64,
}
pub type pc_ema_t = struct_pc_ema;
#[repr(C)]
#[derive(Debug, Copy, Clone, Serialize, Deserialize)]
pub struct struct_pc_price {
    pub magic_: u32,
    pub ver_: u32,
    pub type_: u32,
    pub size_: u32,
    pub ptype_: u32,
    pub expo_: i32,
    pub num_: u32,
    pub num_qt_: u32,
    pub last_slot_: u64,
    pub valid_slot_: u64,
    pub twap_: pc_ema_t,
    pub twac_: pc_ema_t,
    pub drv1_: i64,
    pub min_pub_: u8,
    pub drv2_: i8,
    pub drv3_: i16,
    pub drv4_: i32,
    pub prod_: Pubkey,
    pub next_: Pubkey,
    pub prev_slot_: u64,
    pub prev_price_: i64,
    pub prev_conf_: u64,
    pub drv5_: u64,
    pub agg_: pc_price_info_t,
    pub comp_: [pc_price_comp_t; 32usize],
}
pub type pc_price_t = struct_pc_price;
pub const e_cmd_init_mapping: enum_command_t = 0;
pub const e_cmd_add_mapping: enum_command_t = 1;
pub const e_cmd_add_product: enum_command_t = 2;
pub const e_cmd_upd_product: enum_command_t = 3;
pub const e_cmd_add_price: enum_command_t = 4;
pub const e_cmd_add_publisher: enum_command_t = 5;
pub const e_cmd_del_publisher: enum_command_t = 6;
pub const e_cmd_upd_price: enum_command_t = 7;
pub const e_cmd_agg_price: enum_command_t = 8;
pub const e_cmd_init_price: enum_command_t = 9;
pub const e_cmd_init_test: enum_command_t = 10;
pub const e_cmd_upd_test: enum_command_t = 11;
pub const e_cmd_set_min_pub: enum_command_t = 12;
pub type enum_command_t = ::std::os::raw::c_uint;
pub use self::enum_command_t as command_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct struct_cmd_hdr {
    pub ver_: u32,
    pub cmd_: i32,
}
pub type cmd_hdr_t = struct_cmd_hdr;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct struct_cmd_add_product {
    pub ver_: u32,
    pub cmd_: i32,
}
pub type cmd_add_product_t = struct_cmd_add_product;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct struct_cmd_upd_product {
    pub ver_: u32,
    pub cmd_: i32,
}
pub type cmd_upd_product_t = struct_cmd_upd_product;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct struct_cmd_add_price {
    pub ver_: u32,
    pub cmd_: i32,
    pub expo_: i32,
    pub ptype_: u32,
}
pub type cmd_add_price_t = struct_cmd_add_price;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct struct_cmd_init_price {
    pub ver_: u32,
    pub cmd_: i32,
    pub expo_: i32,
    pub ptype_: u32,
}
pub type cmd_init_price_t = struct_cmd_init_price;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct struct_cmd_set_min_pub {
    pub ver_: u32,
    pub cmd_: i32,
    pub min_pub_: u8,
}
pub type cmd_set_min_pub_t = struct_cmd_set_min_pub;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct struct_cmd_add_publisher {
    pub ver_: u32,
    pub cmd_: i32,
    pub pub_: Pubkey,
}
pub type cmd_add_publisher_t = struct_cmd_add_publisher;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct struct_cmd_del_publisher {
    pub ver_: u32,
    pub cmd_: i32,
    pub pub_: Pubkey,
}
pub type cmd_del_publisher_t = struct_cmd_del_publisher;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct struct_cmd_upd_price {
    pub ver_: u32,
    pub cmd_: i32,
    pub status_: u32,
    pub unused_: u32,
    pub price_: i64,
    pub conf_: u64,
    pub pub_slot_: u64,
}
pub type cmd_upd_price_t = struct_cmd_upd_price;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct struct_cmd_upd_test {
    pub ver_: u32,
    pub cmd_: i32,
    pub num_: u32,
    pub expo_: i32,
    pub slot_diff_: [i8; 32usize],
    pub price_: [i64; 32usize],
    pub conf_: [u64; 32usize],
}
pub type cmd_upd_test_t = struct_cmd_upd_test;

fn default_mapping_products() -> [Pubkey; PC_MAP_TABLE_SIZE as usize] {
    [Pubkey::default(); PC_MAP_TABLE_SIZE as usize]
}
