/* automatically generated by rust-bindgen 0.60.1 */

#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::std::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub const fn new() -> Self {
        __IncompleteArrayField(::std::marker::PhantomData, [])
    }
    #[inline]
    pub fn as_ptr(&self) -> *const T {
        self as *const _ as *const T
    }
    #[inline]
    pub fn as_mut_ptr(&mut self) -> *mut T {
        self as *mut _ as *mut T
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::std::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::std::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::std::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const __bool_true_false_are_defined: u32 = 1;
pub const PYTH_ORACLE_UTIL_COMPAT_STDINT_STYLE: u32 = 0;
pub const __WORDSIZE: u32 = 64;
pub const __DARWIN_ONLY_64_BIT_INO_T: u32 = 1;
pub const __DARWIN_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const __DARWIN_ONLY_VERS_1050: u32 = 1;
pub const __DARWIN_UNIX03: u32 = 1;
pub const __DARWIN_64_BIT_INO_T: u32 = 1;
pub const __DARWIN_VERS_1050: u32 = 1;
pub const __DARWIN_NON_CANCELABLE: u32 = 0;
pub const __DARWIN_SUF_EXTSN: &[u8; 14usize] = b"$DARWIN_EXTSN\0";
pub const __DARWIN_C_ANSI: u32 = 4096;
pub const __DARWIN_C_FULL: u32 = 900000;
pub const __DARWIN_C_LEVEL: u32 = 900000;
pub const __STDC_WANT_LIB_EXT1__: u32 = 1;
pub const __DARWIN_NO_LONG_LONG: u32 = 0;
pub const _DARWIN_FEATURE_64_BIT_INODE: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_64_BIT_INODE: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_VERS_1050: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const _DARWIN_FEATURE_UNIX_CONFORMANCE: u32 = 3;
pub const __has_ptrcheck: u32 = 0;
pub const __PTHREAD_SIZE__: u32 = 8176;
pub const __PTHREAD_ATTR_SIZE__: u32 = 56;
pub const __PTHREAD_MUTEXATTR_SIZE__: u32 = 8;
pub const __PTHREAD_MUTEX_SIZE__: u32 = 56;
pub const __PTHREAD_CONDATTR_SIZE__: u32 = 8;
pub const __PTHREAD_COND_SIZE__: u32 = 40;
pub const __PTHREAD_ONCE_SIZE__: u32 = 8;
pub const __PTHREAD_RWLOCK_SIZE__: u32 = 192;
pub const __PTHREAD_RWLOCKATTR_SIZE__: u32 = 16;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const INT64_MAX: u64 = 9223372036854775807;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT64_MIN: i64 = -9223372036854775808;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const UINT64_MAX: i32 = -1;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST64_MIN: i64 = -9223372036854775808;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const INT_LEAST64_MAX: u64 = 9223372036854775807;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const UINT_LEAST64_MAX: i32 = -1;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i32 = -32768;
pub const INT_FAST32_MIN: i32 = -2147483648;
pub const INT_FAST64_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u32 = 32767;
pub const INT_FAST32_MAX: u32 = 2147483647;
pub const INT_FAST64_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: u32 = 65535;
pub const UINT_FAST32_MAX: u32 = 4294967295;
pub const UINT_FAST64_MAX: i32 = -1;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const UINTPTR_MAX: i32 = -1;
pub const SIZE_MAX: i32 = -1;
pub const RSIZE_MAX: i32 = -1;
pub const WINT_MIN: i32 = -2147483648;
pub const WINT_MAX: u32 = 2147483647;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const PC_MAGIC: u32 = 2712847316;
pub const PC_VERSION: u32 = 2;
pub const PC_MAX_SEND_LATENCY: u32 = 25;
pub const PC_PUBKEY_SIZE: u32 = 32;
pub const PC_MAP_TABLE_SIZE: u32 = 640;
pub const PC_COMP_SIZE: u32 = 32;
pub const PC_MAX_NUM_DECIMALS: u32 = 8;
pub const PC_PROD_ACC_SIZE: u32 = 512;
pub const PC_EXP_DECAY: i32 = -9;
pub const PC_MAX_CI_DIVISOR: u32 = 20;
pub const PC_HEAP_START: u64 = 12884901888;
pub const PC_PTYPE_UNKNOWN: u32 = 0;
pub const PC_PTYPE_PRICE: u32 = 1;
pub const PC_STATUS_UNKNOWN: u32 = 0;
pub const PC_STATUS_TRADING: u32 = 1;
pub const PC_STATUS_HALTED: u32 = 2;
pub const PC_STATUS_AUCTION: u32 = 3;
pub const PC_ACCTYPE_MAPPING: u32 = 1;
pub const PC_ACCTYPE_PRODUCT: u32 = 2;
pub const PC_ACCTYPE_PRICE: u32 = 3;
pub const PC_ACCTYPE_TEST: u32 = 4;
pub type size_t = ::std::os::raw::c_ulong;
pub type wchar_t = ::std::os::raw::c_int;
pub type max_align_t = f64;
pub type int_least8_t = i8;
pub type int_least16_t = i16;
pub type int_least32_t = i32;
pub type int_least64_t = i64;
pub type uint_least8_t = u8;
pub type uint_least16_t = u16;
pub type uint_least32_t = u32;
pub type uint_least64_t = u64;
pub type int_fast8_t = i8;
pub type int_fast16_t = i16;
pub type int_fast32_t = i32;
pub type int_fast64_t = i64;
pub type uint_fast8_t = u8;
pub type uint_fast16_t = u16;
pub type uint_fast32_t = u32;
pub type uint_fast64_t = u64;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_longlong;
pub type __uint64_t = ::std::os::raw::c_ulonglong;
pub type __darwin_intptr_t = ::std::os::raw::c_long;
pub type __darwin_natural_t = ::std::os::raw::c_uint;
pub type __darwin_ct_rune_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t {
    pub __mbstate8: [::std::os::raw::c_char; 128usize],
    pub _mbstateL: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout___mbstate_t() {
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t>(),
        128usize,
        concat!("Size of: ", stringify!(__mbstate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__mbstate_t))
    );
    fn test_field___mbstate8() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__mbstate_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__mbstate8) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__mbstate_t),
                "::",
                stringify!(__mbstate8)
            )
        );
    }
    test_field___mbstate8();
    fn test_field__mbstateL() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__mbstate_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._mbstateL) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__mbstate_t),
                "::",
                stringify!(_mbstateL)
            )
        );
    }
    test_field__mbstateL();
}
pub type __darwin_mbstate_t = __mbstate_t;
pub type __darwin_ptrdiff_t = ::std::os::raw::c_long;
pub type __darwin_size_t = ::std::os::raw::c_ulong;
pub type __darwin_va_list = __builtin_va_list;
pub type __darwin_wchar_t = ::std::os::raw::c_int;
pub type __darwin_rune_t = __darwin_wchar_t;
pub type __darwin_wint_t = ::std::os::raw::c_int;
pub type __darwin_clock_t = ::std::os::raw::c_ulong;
pub type __darwin_socklen_t = __uint32_t;
pub type __darwin_ssize_t = ::std::os::raw::c_long;
pub type __darwin_time_t = ::std::os::raw::c_long;
pub type __darwin_blkcnt_t = __int64_t;
pub type __darwin_blksize_t = __int32_t;
pub type __darwin_dev_t = __int32_t;
pub type __darwin_fsblkcnt_t = ::std::os::raw::c_uint;
pub type __darwin_fsfilcnt_t = ::std::os::raw::c_uint;
pub type __darwin_gid_t = __uint32_t;
pub type __darwin_id_t = __uint32_t;
pub type __darwin_ino64_t = __uint64_t;
pub type __darwin_ino_t = __darwin_ino64_t;
pub type __darwin_mach_port_name_t = __darwin_natural_t;
pub type __darwin_mach_port_t = __darwin_mach_port_name_t;
pub type __darwin_mode_t = __uint16_t;
pub type __darwin_off_t = __int64_t;
pub type __darwin_pid_t = __int32_t;
pub type __darwin_sigset_t = __uint32_t;
pub type __darwin_suseconds_t = __int32_t;
pub type __darwin_uid_t = __uint32_t;
pub type __darwin_useconds_t = __uint32_t;
pub type __darwin_uuid_t = [::std::os::raw::c_uchar; 16usize];
pub type __darwin_uuid_string_t = [::std::os::raw::c_char; 37usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_pthread_handler_rec {
    pub __routine: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub __arg: *mut ::std::os::raw::c_void,
    pub __next: *mut __darwin_pthread_handler_rec,
}
#[test]
fn bindgen_test_layout___darwin_pthread_handler_rec() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_pthread_handler_rec>(),
        24usize,
        concat!("Size of: ", stringify!(__darwin_pthread_handler_rec))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_pthread_handler_rec>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_pthread_handler_rec))
    );
    fn test_field___routine() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_pthread_handler_rec>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__routine) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_pthread_handler_rec),
                "::",
                stringify!(__routine)
            )
        );
    }
    test_field___routine();
    fn test_field___arg() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_pthread_handler_rec>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__arg) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_pthread_handler_rec),
                "::",
                stringify!(__arg)
            )
        );
    }
    test_field___arg();
    fn test_field___next() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__darwin_pthread_handler_rec>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__next) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(__darwin_pthread_handler_rec),
                "::",
                stringify!(__next)
            )
        );
    }
    test_field___next();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_attr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_attr_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_attr_t>(),
        64usize,
        concat!("Size of: ", stringify!(_opaque_pthread_attr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_attr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_attr_t))
    );
    fn test_field___sig() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_opaque_pthread_attr_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_opaque_pthread_attr_t),
                "::",
                stringify!(__sig)
            )
        );
    }
    test_field___sig();
    fn test_field___opaque() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_opaque_pthread_attr_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(_opaque_pthread_attr_t),
                "::",
                stringify!(__opaque)
            )
        );
    }
    test_field___opaque();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_cond_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 40usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_cond_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(_opaque_pthread_cond_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_cond_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_cond_t))
    );
    fn test_field___sig() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_opaque_pthread_cond_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_opaque_pthread_cond_t),
                "::",
                stringify!(__sig)
            )
        );
    }
    test_field___sig();
    fn test_field___opaque() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_opaque_pthread_cond_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(_opaque_pthread_cond_t),
                "::",
                stringify!(__opaque)
            )
        );
    }
    test_field___opaque();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_condattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_condattr_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_condattr_t>(),
        16usize,
        concat!("Size of: ", stringify!(_opaque_pthread_condattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_condattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_condattr_t))
    );
    fn test_field___sig() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_opaque_pthread_condattr_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_opaque_pthread_condattr_t),
                "::",
                stringify!(__sig)
            )
        );
    }
    test_field___sig();
    fn test_field___opaque() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_opaque_pthread_condattr_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(_opaque_pthread_condattr_t),
                "::",
                stringify!(__opaque)
            )
        );
    }
    test_field___opaque();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_mutex_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_mutex_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_mutex_t>(),
        64usize,
        concat!("Size of: ", stringify!(_opaque_pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_mutex_t))
    );
    fn test_field___sig() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_opaque_pthread_mutex_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_opaque_pthread_mutex_t),
                "::",
                stringify!(__sig)
            )
        );
    }
    test_field___sig();
    fn test_field___opaque() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_opaque_pthread_mutex_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(_opaque_pthread_mutex_t),
                "::",
                stringify!(__opaque)
            )
        );
    }
    test_field___opaque();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_mutexattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_mutexattr_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_mutexattr_t>(),
        16usize,
        concat!("Size of: ", stringify!(_opaque_pthread_mutexattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_mutexattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_mutexattr_t))
    );
    fn test_field___sig() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_opaque_pthread_mutexattr_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_opaque_pthread_mutexattr_t),
                "::",
                stringify!(__sig)
            )
        );
    }
    test_field___sig();
    fn test_field___opaque() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_opaque_pthread_mutexattr_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(_opaque_pthread_mutexattr_t),
                "::",
                stringify!(__opaque)
            )
        );
    }
    test_field___opaque();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_once_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_once_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_once_t>(),
        16usize,
        concat!("Size of: ", stringify!(_opaque_pthread_once_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_once_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_once_t))
    );
    fn test_field___sig() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_opaque_pthread_once_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_opaque_pthread_once_t),
                "::",
                stringify!(__sig)
            )
        );
    }
    test_field___sig();
    fn test_field___opaque() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_opaque_pthread_once_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(_opaque_pthread_once_t),
                "::",
                stringify!(__opaque)
            )
        );
    }
    test_field___opaque();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_rwlock_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 192usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_rwlock_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_rwlock_t>(),
        200usize,
        concat!("Size of: ", stringify!(_opaque_pthread_rwlock_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_rwlock_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_rwlock_t))
    );
    fn test_field___sig() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_opaque_pthread_rwlock_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_opaque_pthread_rwlock_t),
                "::",
                stringify!(__sig)
            )
        );
    }
    test_field___sig();
    fn test_field___opaque() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_opaque_pthread_rwlock_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(_opaque_pthread_rwlock_t),
                "::",
                stringify!(__opaque)
            )
        );
    }
    test_field___opaque();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_rwlockattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 16usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_rwlockattr_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_rwlockattr_t>(),
        24usize,
        concat!("Size of: ", stringify!(_opaque_pthread_rwlockattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_rwlockattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_rwlockattr_t))
    );
    fn test_field___sig() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_opaque_pthread_rwlockattr_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_opaque_pthread_rwlockattr_t),
                "::",
                stringify!(__sig)
            )
        );
    }
    test_field___sig();
    fn test_field___opaque() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_opaque_pthread_rwlockattr_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(_opaque_pthread_rwlockattr_t),
                "::",
                stringify!(__opaque)
            )
        );
    }
    test_field___opaque();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_t {
    pub __sig: ::std::os::raw::c_long,
    pub __cleanup_stack: *mut __darwin_pthread_handler_rec,
    pub __opaque: [::std::os::raw::c_char; 8176usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_t>(),
        8192usize,
        concat!("Size of: ", stringify!(_opaque_pthread_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_t))
    );
    fn test_field___sig() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_opaque_pthread_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_opaque_pthread_t),
                "::",
                stringify!(__sig)
            )
        );
    }
    test_field___sig();
    fn test_field___cleanup_stack() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_opaque_pthread_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__cleanup_stack) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(_opaque_pthread_t),
                "::",
                stringify!(__cleanup_stack)
            )
        );
    }
    test_field___cleanup_stack();
    fn test_field___opaque() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_opaque_pthread_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(_opaque_pthread_t),
                "::",
                stringify!(__opaque)
            )
        );
    }
    test_field___opaque();
}
pub type __darwin_pthread_attr_t = _opaque_pthread_attr_t;
pub type __darwin_pthread_cond_t = _opaque_pthread_cond_t;
pub type __darwin_pthread_condattr_t = _opaque_pthread_condattr_t;
pub type __darwin_pthread_key_t = ::std::os::raw::c_ulong;
pub type __darwin_pthread_mutex_t = _opaque_pthread_mutex_t;
pub type __darwin_pthread_mutexattr_t = _opaque_pthread_mutexattr_t;
pub type __darwin_pthread_once_t = _opaque_pthread_once_t;
pub type __darwin_pthread_rwlock_t = _opaque_pthread_rwlock_t;
pub type __darwin_pthread_rwlockattr_t = _opaque_pthread_rwlockattr_t;
pub type __darwin_pthread_t = *mut _opaque_pthread_t;
pub type u_int8_t = ::std::os::raw::c_uchar;
pub type u_int16_t = ::std::os::raw::c_ushort;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type u_int64_t = ::std::os::raw::c_ulonglong;
pub type register_t = i64;
pub type user_addr_t = u_int64_t;
pub type user_size_t = u_int64_t;
pub type user_ssize_t = i64;
pub type user_long_t = i64;
pub type user_ulong_t = u_int64_t;
pub type user_time_t = i64;
pub type user_off_t = i64;
pub type syscall_arg_t = u_int64_t;
pub type intmax_t = ::std::os::raw::c_long;
pub type uintmax_t = ::std::os::raw::c_ulong;
pub const TIME_MACHINE_STRUCT_SIZE: u64 = 1864;
pub const EXTRA_PUBLISHER_SPACE: u64 = 1000;
extern "C" {
    pub static sysvar_clock: [u64; 4usize];
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pc_pub_key {
    pub k1_: [u8; 32usize],
    pub k8_: [u64; 4usize],
}
#[test]
fn bindgen_test_layout_pc_pub_key() {
    assert_eq!(
        ::std::mem::size_of::<pc_pub_key>(),
        32usize,
        concat!("Size of: ", stringify!(pc_pub_key))
    );
    assert_eq!(
        ::std::mem::align_of::<pc_pub_key>(),
        8usize,
        concat!("Alignment of ", stringify!(pc_pub_key))
    );
    fn test_field_k1_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pc_pub_key>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).k1_) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pc_pub_key),
                "::",
                stringify!(k1_)
            )
        );
    }
    test_field_k1_();
    fn test_field_k8_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pc_pub_key>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).k8_) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pc_pub_key),
                "::",
                stringify!(k8_)
            )
        );
    }
    test_field_k8_();
}
pub type pc_pub_key_t = pc_pub_key;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pc_acc {
    pub magic_: u32,
    pub ver_: u32,
    pub type_: u32,
    pub size_: u32,
}
#[test]
fn bindgen_test_layout_pc_acc() {
    assert_eq!(
        ::std::mem::size_of::<pc_acc>(),
        16usize,
        concat!("Size of: ", stringify!(pc_acc))
    );
    assert_eq!(
        ::std::mem::align_of::<pc_acc>(),
        4usize,
        concat!("Alignment of ", stringify!(pc_acc))
    );
    fn test_field_magic_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pc_acc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).magic_) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pc_acc),
                "::",
                stringify!(magic_)
            )
        );
    }
    test_field_magic_();
    fn test_field_ver_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pc_acc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ver_) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(pc_acc),
                "::",
                stringify!(ver_)
            )
        );
    }
    test_field_ver_();
    fn test_field_type_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pc_acc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(pc_acc),
                "::",
                stringify!(type_)
            )
        );
    }
    test_field_type_();
    fn test_field_size_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pc_acc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).size_) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(pc_acc),
                "::",
                stringify!(size_)
            )
        );
    }
    test_field_size_();
}
pub type pc_acc_t = pc_acc;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pc_map_table {
    pub magic_: u32,
    pub ver_: u32,
    pub type_: u32,
    pub size_: u32,
    pub num_: u32,
    pub unused_: u32,
    pub next_: pc_pub_key_t,
    pub prod_: [pc_pub_key_t; 640usize],
}
#[test]
fn bindgen_test_layout_pc_map_table() {
    assert_eq!(
        ::std::mem::size_of::<pc_map_table>(),
        20536usize,
        concat!("Size of: ", stringify!(pc_map_table))
    );
    assert_eq!(
        ::std::mem::align_of::<pc_map_table>(),
        8usize,
        concat!("Alignment of ", stringify!(pc_map_table))
    );
    fn test_field_magic_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pc_map_table>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).magic_) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pc_map_table),
                "::",
                stringify!(magic_)
            )
        );
    }
    test_field_magic_();
    fn test_field_ver_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pc_map_table>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ver_) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(pc_map_table),
                "::",
                stringify!(ver_)
            )
        );
    }
    test_field_ver_();
    fn test_field_type_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pc_map_table>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(pc_map_table),
                "::",
                stringify!(type_)
            )
        );
    }
    test_field_type_();
    fn test_field_size_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pc_map_table>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).size_) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(pc_map_table),
                "::",
                stringify!(size_)
            )
        );
    }
    test_field_size_();
    fn test_field_num_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pc_map_table>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).num_) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(pc_map_table),
                "::",
                stringify!(num_)
            )
        );
    }
    test_field_num_();
    fn test_field_unused_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pc_map_table>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).unused_) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(pc_map_table),
                "::",
                stringify!(unused_)
            )
        );
    }
    test_field_unused_();
    fn test_field_next_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pc_map_table>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).next_) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(pc_map_table),
                "::",
                stringify!(next_)
            )
        );
    }
    test_field_next_();
    fn test_field_prod_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pc_map_table>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).prod_) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(pc_map_table),
                "::",
                stringify!(prod_)
            )
        );
    }
    test_field_prod_();
}
pub type pc_map_table_t = pc_map_table;
#[repr(C)]
#[derive(Debug)]
pub struct pc_str {
    pub len_: u8,
    pub data_: __IncompleteArrayField<::std::os::raw::c_char>,
}
#[test]
fn bindgen_test_layout_pc_str() {
    assert_eq!(
        ::std::mem::size_of::<pc_str>(),
        1usize,
        concat!("Size of: ", stringify!(pc_str))
    );
    assert_eq!(
        ::std::mem::align_of::<pc_str>(),
        1usize,
        concat!("Alignment of ", stringify!(pc_str))
    );
    fn test_field_len_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pc_str>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).len_) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pc_str),
                "::",
                stringify!(len_)
            )
        );
    }
    test_field_len_();
    fn test_field_data_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pc_str>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).data_) as usize - ptr as usize
            },
            1usize,
            concat!(
                "Offset of field: ",
                stringify!(pc_str),
                "::",
                stringify!(data_)
            )
        );
    }
    test_field_data_();
}
pub type pc_str_t = pc_str;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pc_prod {
    pub magic_: u32,
    pub ver_: u32,
    pub type_: u32,
    pub size_: u32,
    pub px_acc_: pc_pub_key_t,
}
#[test]
fn bindgen_test_layout_pc_prod() {
    assert_eq!(
        ::std::mem::size_of::<pc_prod>(),
        48usize,
        concat!("Size of: ", stringify!(pc_prod))
    );
    assert_eq!(
        ::std::mem::align_of::<pc_prod>(),
        8usize,
        concat!("Alignment of ", stringify!(pc_prod))
    );
    fn test_field_magic_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pc_prod>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).magic_) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pc_prod),
                "::",
                stringify!(magic_)
            )
        );
    }
    test_field_magic_();
    fn test_field_ver_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pc_prod>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ver_) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(pc_prod),
                "::",
                stringify!(ver_)
            )
        );
    }
    test_field_ver_();
    fn test_field_type_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pc_prod>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(pc_prod),
                "::",
                stringify!(type_)
            )
        );
    }
    test_field_type_();
    fn test_field_size_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pc_prod>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).size_) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(pc_prod),
                "::",
                stringify!(size_)
            )
        );
    }
    test_field_size_();
    fn test_field_px_acc_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pc_prod>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).px_acc_) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(pc_prod),
                "::",
                stringify!(px_acc_)
            )
        );
    }
    test_field_px_acc_();
}
pub type pc_prod_t = pc_prod;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pc_price_info {
    pub price_: i64,
    pub conf_: u64,
    pub status_: u32,
    pub corp_act_status_: u32,
    pub pub_slot_: u64,
}
#[test]
fn bindgen_test_layout_pc_price_info() {
    assert_eq!(
        ::std::mem::size_of::<pc_price_info>(),
        32usize,
        concat!("Size of: ", stringify!(pc_price_info))
    );
    assert_eq!(
        ::std::mem::align_of::<pc_price_info>(),
        8usize,
        concat!("Alignment of ", stringify!(pc_price_info))
    );
    fn test_field_price_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pc_price_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).price_) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pc_price_info),
                "::",
                stringify!(price_)
            )
        );
    }
    test_field_price_();
    fn test_field_conf_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pc_price_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).conf_) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(pc_price_info),
                "::",
                stringify!(conf_)
            )
        );
    }
    test_field_conf_();
    fn test_field_status_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pc_price_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).status_) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(pc_price_info),
                "::",
                stringify!(status_)
            )
        );
    }
    test_field_status_();
    fn test_field_corp_act_status_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pc_price_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).corp_act_status_) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(pc_price_info),
                "::",
                stringify!(corp_act_status_)
            )
        );
    }
    test_field_corp_act_status_();
    fn test_field_pub_slot_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pc_price_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pub_slot_) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(pc_price_info),
                "::",
                stringify!(pub_slot_)
            )
        );
    }
    test_field_pub_slot_();
}
pub type pc_price_info_t = pc_price_info;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pc_price_comp {
    pub pub_: pc_pub_key_t,
    pub agg_: pc_price_info_t,
    pub latest_: pc_price_info_t,
}
#[test]
fn bindgen_test_layout_pc_price_comp() {
    assert_eq!(
        ::std::mem::size_of::<pc_price_comp>(),
        96usize,
        concat!("Size of: ", stringify!(pc_price_comp))
    );
    assert_eq!(
        ::std::mem::align_of::<pc_price_comp>(),
        8usize,
        concat!("Alignment of ", stringify!(pc_price_comp))
    );
    fn test_field_pub_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pc_price_comp>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pub_) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pc_price_comp),
                "::",
                stringify!(pub_)
            )
        );
    }
    test_field_pub_();
    fn test_field_agg_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pc_price_comp>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).agg_) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(pc_price_comp),
                "::",
                stringify!(agg_)
            )
        );
    }
    test_field_agg_();
    fn test_field_latest_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pc_price_comp>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).latest_) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(pc_price_comp),
                "::",
                stringify!(latest_)
            )
        );
    }
    test_field_latest_();
}
pub type pc_price_comp_t = pc_price_comp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pc_ema {
    pub val_: i64,
    pub numer_: i64,
    pub denom_: i64,
}
#[test]
fn bindgen_test_layout_pc_ema() {
    assert_eq!(
        ::std::mem::size_of::<pc_ema>(),
        24usize,
        concat!("Size of: ", stringify!(pc_ema))
    );
    assert_eq!(
        ::std::mem::align_of::<pc_ema>(),
        8usize,
        concat!("Alignment of ", stringify!(pc_ema))
    );
    fn test_field_val_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pc_ema>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).val_) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pc_ema),
                "::",
                stringify!(val_)
            )
        );
    }
    test_field_val_();
    fn test_field_numer_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pc_ema>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).numer_) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(pc_ema),
                "::",
                stringify!(numer_)
            )
        );
    }
    test_field_numer_();
    fn test_field_denom_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pc_ema>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).denom_) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(pc_ema),
                "::",
                stringify!(denom_)
            )
        );
    }
    test_field_denom_();
}
pub type pc_ema_t = pc_ema;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pc_price {
    pub magic_: u32,
    pub ver_: u32,
    pub type_: u32,
    pub size_: u32,
    pub ptype_: u32,
    pub expo_: i32,
    pub num_: u32,
    pub num_qt_: u32,
    pub last_slot_: u64,
    pub valid_slot_: u64,
    pub twap_: pc_ema_t,
    pub twac_: pc_ema_t,
    pub timestamp_: i64,
    pub min_pub_: u8,
    pub drv2_: i8,
    pub drv3_: i16,
    pub drv4_: i32,
    pub prod_: pc_pub_key_t,
    pub next_: pc_pub_key_t,
    pub prev_slot_: u64,
    pub prev_price_: i64,
    pub prev_conf_: u64,
    pub prev_timestamp_: i64,
    pub agg_: pc_price_info_t,
    pub comp_: [pc_price_comp_t; 32usize],
}
#[test]
fn bindgen_test_layout_pc_price() {
    assert_eq!(
        ::std::mem::size_of::<pc_price>(),
        3312usize,
        concat!("Size of: ", stringify!(pc_price))
    );
    assert_eq!(
        ::std::mem::align_of::<pc_price>(),
        8usize,
        concat!("Alignment of ", stringify!(pc_price))
    );
    fn test_field_magic_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pc_price>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).magic_) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pc_price),
                "::",
                stringify!(magic_)
            )
        );
    }
    test_field_magic_();
    fn test_field_ver_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pc_price>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ver_) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(pc_price),
                "::",
                stringify!(ver_)
            )
        );
    }
    test_field_ver_();
    fn test_field_type_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pc_price>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(pc_price),
                "::",
                stringify!(type_)
            )
        );
    }
    test_field_type_();
    fn test_field_size_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pc_price>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).size_) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(pc_price),
                "::",
                stringify!(size_)
            )
        );
    }
    test_field_size_();
    fn test_field_ptype_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pc_price>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ptype_) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(pc_price),
                "::",
                stringify!(ptype_)
            )
        );
    }
    test_field_ptype_();
    fn test_field_expo_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pc_price>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).expo_) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(pc_price),
                "::",
                stringify!(expo_)
            )
        );
    }
    test_field_expo_();
    fn test_field_num_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pc_price>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).num_) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(pc_price),
                "::",
                stringify!(num_)
            )
        );
    }
    test_field_num_();
    fn test_field_num_qt_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pc_price>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).num_qt_) as usize - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(pc_price),
                "::",
                stringify!(num_qt_)
            )
        );
    }
    test_field_num_qt_();
    fn test_field_last_slot_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pc_price>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).last_slot_) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(pc_price),
                "::",
                stringify!(last_slot_)
            )
        );
    }
    test_field_last_slot_();
    fn test_field_valid_slot_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pc_price>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).valid_slot_) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(pc_price),
                "::",
                stringify!(valid_slot_)
            )
        );
    }
    test_field_valid_slot_();
    fn test_field_twap_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pc_price>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).twap_) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(pc_price),
                "::",
                stringify!(twap_)
            )
        );
    }
    test_field_twap_();
    fn test_field_twac_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pc_price>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).twac_) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(pc_price),
                "::",
                stringify!(twac_)
            )
        );
    }
    test_field_twac_();
    fn test_field_timestamp_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pc_price>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).timestamp_) as usize - ptr as usize
            },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(pc_price),
                "::",
                stringify!(timestamp_)
            )
        );
    }
    test_field_timestamp_();
    fn test_field_min_pub_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pc_price>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).min_pub_) as usize - ptr as usize
            },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(pc_price),
                "::",
                stringify!(min_pub_)
            )
        );
    }
    test_field_min_pub_();
    fn test_field_drv2_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pc_price>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).drv2_) as usize - ptr as usize
            },
            105usize,
            concat!(
                "Offset of field: ",
                stringify!(pc_price),
                "::",
                stringify!(drv2_)
            )
        );
    }
    test_field_drv2_();
    fn test_field_drv3_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pc_price>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).drv3_) as usize - ptr as usize
            },
            106usize,
            concat!(
                "Offset of field: ",
                stringify!(pc_price),
                "::",
                stringify!(drv3_)
            )
        );
    }
    test_field_drv3_();
    fn test_field_drv4_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pc_price>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).drv4_) as usize - ptr as usize
            },
            108usize,
            concat!(
                "Offset of field: ",
                stringify!(pc_price),
                "::",
                stringify!(drv4_)
            )
        );
    }
    test_field_drv4_();
    fn test_field_prod_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pc_price>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).prod_) as usize - ptr as usize
            },
            112usize,
            concat!(
                "Offset of field: ",
                stringify!(pc_price),
                "::",
                stringify!(prod_)
            )
        );
    }
    test_field_prod_();
    fn test_field_next_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pc_price>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).next_) as usize - ptr as usize
            },
            144usize,
            concat!(
                "Offset of field: ",
                stringify!(pc_price),
                "::",
                stringify!(next_)
            )
        );
    }
    test_field_next_();
    fn test_field_prev_slot_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pc_price>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).prev_slot_) as usize - ptr as usize
            },
            176usize,
            concat!(
                "Offset of field: ",
                stringify!(pc_price),
                "::",
                stringify!(prev_slot_)
            )
        );
    }
    test_field_prev_slot_();
    fn test_field_prev_price_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pc_price>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).prev_price_) as usize - ptr as usize
            },
            184usize,
            concat!(
                "Offset of field: ",
                stringify!(pc_price),
                "::",
                stringify!(prev_price_)
            )
        );
    }
    test_field_prev_price_();
    fn test_field_prev_conf_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pc_price>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).prev_conf_) as usize - ptr as usize
            },
            192usize,
            concat!(
                "Offset of field: ",
                stringify!(pc_price),
                "::",
                stringify!(prev_conf_)
            )
        );
    }
    test_field_prev_conf_();
    fn test_field_prev_timestamp_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pc_price>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).prev_timestamp_) as usize - ptr as usize
            },
            200usize,
            concat!(
                "Offset of field: ",
                stringify!(pc_price),
                "::",
                stringify!(prev_timestamp_)
            )
        );
    }
    test_field_prev_timestamp_();
    fn test_field_agg_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pc_price>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).agg_) as usize - ptr as usize
            },
            208usize,
            concat!(
                "Offset of field: ",
                stringify!(pc_price),
                "::",
                stringify!(agg_)
            )
        );
    }
    test_field_agg_();
    fn test_field_comp_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pc_price>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).comp_) as usize - ptr as usize
            },
            240usize,
            concat!(
                "Offset of field: ",
                stringify!(pc_price),
                "::",
                stringify!(comp_)
            )
        );
    }
    test_field_comp_();
}
pub type pc_price_t = pc_price;
pub const PRICE_ACCOUNT_SIZE: u64 = 6176;
pub const PC_PRICE_T_COMP_OFFSET: size_t = 240;
pub const PC_MAP_TABLE_T_PROD_OFFSET: size_t = 56;
pub type __builtin_va_list = *mut ::std::os::raw::c_char;
