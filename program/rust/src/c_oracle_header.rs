#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
// We do not use all the variables in oracle.h, so this helps with the warnings
#![allow(dead_code)]
// All the custom trait imports should go here
use {
    crate::instruction::OracleCommand,
    bytemuck::{
        Pod,
        Zeroable,
    },
    solana_program::pubkey::Pubkey,
    std::mem::size_of,
};

// Bindings.rs is generated by build.rs to include things defined in bindings.h
include!("../bindings.rs");

pub const PERMISSIONS_SEED: &str = "permissions";


/// If ci > price / PC_MAX_CI_DIVISOR, set publisher status to unknown.
/// (e.g., 20 means ci must be < 5% of price)
pub const MAX_CI_DIVISOR: i64 = 3;
/// Bound on the range of the exponent in price accounts. This number is set such that the
/// PD-based EMA computation does not lose too much precision.
pub const MAX_NUM_DECIMALS: i32 = 8;

/// The PythAccount trait's purpose is to attach constants to the 3 types of accounts that Pyth has
/// (mapping, price, product). This allows less duplicated code, because now we can create generic
/// functions to perform common checks on the accounts and to load and initialize the accounts.
pub trait PythAccount: Pod {
    /// `ACCOUNT_TYPE` is just the account discriminator, it is different for mapping, product and
    /// price
    const ACCOUNT_TYPE: u32;
    /// `INITIAL_SIZE` is the value that the field `size_` will take when the account is first
    /// initialized this one is slightly tricky because for mapping (resp. price) `size_` won't
    /// include the unpopulated entries of `prod_` (resp. `comp_`). At the beginning there are 0
    /// products (resp. 0 components) therefore `INITIAL_SIZE` will be equal to the offset of
    /// `prod_` (resp. `comp_`)  Similarly the product account `INITIAL_SIZE` won't include any
    /// key values.
    const INITIAL_SIZE: u32;
    /// `minimum_size()` is the minimum size that the solana account holding the struct needs to
    /// have. `INITIAL_SIZE` <= `minimum_size()`
    const MINIMUM_SIZE: usize = size_of::<Self>();
}

impl PythAccount for MappingAccount {
    const ACCOUNT_TYPE: u32 = PC_ACCTYPE_MAPPING;
    /// Equal to the offset of `prod_` in `MappingAccount`, see the trait comment for more detail
    const INITIAL_SIZE: u32 = PC_MAP_TABLE_T_PROD_OFFSET as u32;
}

impl PythAccount for ProductAccount {
    const ACCOUNT_TYPE: u32 = PC_ACCTYPE_PRODUCT;
    const INITIAL_SIZE: u32 = size_of::<ProductAccount>() as u32;
    const MINIMUM_SIZE: usize = PC_PROD_ACC_SIZE as usize;
}

impl PythAccount for PriceAccount {
    const ACCOUNT_TYPE: u32 = PC_ACCTYPE_PRICE;
    /// Equal to the offset of `comp_` in `PriceAccount`, see the trait comment for more detail
    const INITIAL_SIZE: u32 = PC_PRICE_T_COMP_OFFSET as u32;
}

impl PythAccount for PermissionAccount {
    const ACCOUNT_TYPE: u32 = PC_ACCTYPE_PERMISSIONS;
    const INITIAL_SIZE: u32 = size_of::<PermissionAccount>() as u32;
}

/// This account stores the pubkeys that can execute administrative instructions in the Pyth
/// program. Only the upgrade authority of the program can update these permissions.
#[repr(C)]
#[derive(Copy, Clone, Pod, Zeroable)]
pub struct PermissionAccount {
    /// pyth account header
    pub header:                  AccountHeader,
    /// An authority that can do any administrative task
    pub master_authority:        Pubkey,
    /// An authority that can  :
    /// - Add mapping accounts
    /// - Add price accounts
    /// - Add product accounts
    /// - Delete price accounts
    /// - Delete product accounts
    /// - Update product accounts
    pub data_curation_authority: Pubkey,
    /// An authority that can  :
    /// - Add publishers
    /// - Delete publishers
    /// - Set minimum number of publishers
    pub security_authority:      Pubkey,
}

impl PermissionAccount {
    pub fn is_authorized(&self, key: &Pubkey, command: OracleCommand) -> bool {
        #[allow(clippy::match_like_matches_macro)]
        match (*key, command) {
            (pubkey, OracleCommand::InitMapping) if pubkey == self.master_authority => true,
            _ => false,
        }
    }
}

#[repr(C)]
#[derive(Copy, Clone, Pod, Zeroable)]
pub struct PriceAccount {
    pub header:             AccountHeader,
    /// Type of the price account
    pub price_type:         u32,
    /// Exponent for the published prices
    pub exponent:           i32,
    /// Current number of authorized publishers
    pub num_:               u32,
    /// Number of valid quotes for the last aggregation
    pub num_qt_:            u32,
    /// Last slot with a succesful aggregation (status : TRADING)
    pub last_slot_:         u64,
    /// Second to last slot where aggregation was attempted
    pub valid_slot_:        u64,
    /// Ema for price
    pub twap_:              PriceEma,
    /// Ema for confidence
    pub twac_:              PriceEma,
    /// Last time aggregation was attempted
    pub timestamp_:         i64,
    /// Minimum valid publisher quotes for a succesful aggregation
    pub min_pub_:           u8,
    pub unused_1_:          i8,
    pub unused_2_:          i16,
    pub unused_3_:          i32,
    /// Corresponding product account
    pub product_account:    Pubkey,
    /// Next price account in the list
    pub next_price_account: Pubkey,
    /// Second to last slot where aggregation was succesful (i.e. status : TRADING)
    pub prev_slot_:         u64,
    /// Aggregate price at prev_slot_
    pub prev_price_:        i64,
    /// Confidence interval at prev_slot_
    pub prev_conf_:         u64,
    /// Timestamp of prev_slot_
    pub prev_timestamp_:    i64,
    /// Last attempted aggregate results
    pub agg_:               PriceInfo,
    /// Publishers' price components
    pub comp_:              [PriceComponent; PC_COMP_SIZE as usize],
}

#[repr(C)]
#[derive(Copy, Clone, Pod, Zeroable)]
pub struct PriceComponent {
    pub pub_:    Pubkey,
    pub agg_:    PriceInfo,
    pub latest_: PriceInfo,
}

#[repr(C)]
#[derive(Debug, Copy, Clone, Pod, Zeroable)]
pub struct PriceInfo {
    pub price_:           i64,
    pub conf_:            u64,
    pub status_:          u32,
    pub corp_act_status_: u32,
    pub pub_slot_:        u64,
}

#[repr(C)]
#[derive(Debug, Copy, Clone, Pod, Zeroable)]
pub struct PriceEma {
    pub val_:   i64,
    pub numer_: i64,
    pub denom_: i64,
}

#[repr(C)]
#[derive(Copy, Clone, Zeroable, Pod)]
pub struct AccountHeader {
    pub magic_number: u32,
    pub version:      u32,
    pub account_type: u32,
    pub size:         u32,
}

#[repr(C)]
#[derive(Copy, Clone, Pod, Zeroable)]
pub struct ProductAccount {
    pub header:              AccountHeader,
    pub first_price_account: Pubkey,
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct MappingAccount {
    pub header:               AccountHeader,
    pub number_of_products:   u32,
    pub unused_:              u32,
    pub next_mapping_account: Pubkey,
    pub products_list:        [Pubkey; PC_MAP_TABLE_SIZE as usize],
}

// Unsafe impl because product_list is of size 640 and there's no derived trait for this size
unsafe impl Pod for MappingAccount {
}
unsafe impl Zeroable for MappingAccount {
}
