/* automatically generated by rust-bindgen 0.60.1 */

#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::std::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub const fn new() -> Self {
        __IncompleteArrayField(::std::marker::PhantomData, [])
    }
    #[inline]
    pub fn as_ptr(&self) -> *const T {
        self as *const _ as *const T
    }
    #[inline]
    pub fn as_mut_ptr(&mut self) -> *mut T {
        self as *mut _ as *mut T
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::std::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::std::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::std::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const __bool_true_false_are_defined: u32 = 1;
pub const PC_MAGIC: u32 = 2712847316;
pub const PC_VERSION: u32 = 2;
pub const PC_MAX_SEND_LATENCY: u32 = 25;
pub const PC_PUBKEY_SIZE: u32 = 32;
pub const PC_MAP_TABLE_SIZE: u32 = 640;
pub const PC_COMP_SIZE: u32 = 32;
pub const PC_MAX_NUM_DECIMALS: u32 = 8;
pub const PC_PROD_ACC_SIZE: u32 = 512;
pub const PC_EXP_DECAY: i32 = -9;
pub const PC_MAX_CI_DIVISOR: u32 = 20;
pub const PC_HEAP_START: u64 = 12884901888;
pub const PC_PTYPE_UNKNOWN: u32 = 0;
pub const PC_PTYPE_PRICE: u32 = 1;
pub const PC_STATUS_UNKNOWN: u32 = 0;
pub const PC_STATUS_TRADING: u32 = 1;
pub const PC_STATUS_HALTED: u32 = 2;
pub const PC_STATUS_AUCTION: u32 = 3;
pub const PC_ACCTYPE_MAPPING: u32 = 1;
pub const PC_ACCTYPE_PRODUCT: u32 = 2;
pub const PC_ACCTYPE_PRICE: u32 = 3;
pub const PC_ACCTYPE_TEST: u32 = 4;
pub const SUCCESSFULLY_UPDATED_AGGREGATE: u64 = 15;
extern "C" {
    pub static sysvar_clock: [u64; 4usize];
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pc_pub_key {
    pub k1_: [u8; 32usize],
    pub k8_: [u64; 4usize],
}
#[test]
fn bindgen_test_layout_pc_pub_key() {
    assert_eq!(
        ::std::mem::size_of::<pc_pub_key>(),
        32usize,
        concat!("Size of: ", stringify!(pc_pub_key))
    );
    assert_eq!(
        ::std::mem::align_of::<pc_pub_key>(),
        8usize,
        concat!("Alignment of ", stringify!(pc_pub_key))
    );
    fn test_field_k1_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pc_pub_key>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).k1_) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pc_pub_key),
                "::",
                stringify!(k1_)
            )
        );
    }
    test_field_k1_();
    fn test_field_k8_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pc_pub_key>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).k8_) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pc_pub_key),
                "::",
                stringify!(k8_)
            )
        );
    }
    test_field_k8_();
}
pub type pc_pub_key_t = pc_pub_key;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pc_acc {
    pub magic_: u32,
    pub ver_: u32,
    pub type_: u32,
    pub size_: u32,
}
#[test]
fn bindgen_test_layout_pc_acc() {
    assert_eq!(
        ::std::mem::size_of::<pc_acc>(),
        16usize,
        concat!("Size of: ", stringify!(pc_acc))
    );
    assert_eq!(
        ::std::mem::align_of::<pc_acc>(),
        4usize,
        concat!("Alignment of ", stringify!(pc_acc))
    );
    fn test_field_magic_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pc_acc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).magic_) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pc_acc),
                "::",
                stringify!(magic_)
            )
        );
    }
    test_field_magic_();
    fn test_field_ver_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pc_acc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ver_) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(pc_acc),
                "::",
                stringify!(ver_)
            )
        );
    }
    test_field_ver_();
    fn test_field_type_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pc_acc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(pc_acc),
                "::",
                stringify!(type_)
            )
        );
    }
    test_field_type_();
    fn test_field_size_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pc_acc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).size_) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(pc_acc),
                "::",
                stringify!(size_)
            )
        );
    }
    test_field_size_();
}
pub type pc_acc_t = pc_acc;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pc_map_table {
    pub magic_: u32,
    pub ver_: u32,
    pub type_: u32,
    pub size_: u32,
    pub num_: u32,
    pub unused_: u32,
    pub next_: pc_pub_key_t,
    pub prod_: [pc_pub_key_t; 640usize],
}
#[test]
fn bindgen_test_layout_pc_map_table() {
    assert_eq!(
        ::std::mem::size_of::<pc_map_table>(),
        20536usize,
        concat!("Size of: ", stringify!(pc_map_table))
    );
    assert_eq!(
        ::std::mem::align_of::<pc_map_table>(),
        8usize,
        concat!("Alignment of ", stringify!(pc_map_table))
    );
    fn test_field_magic_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pc_map_table>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).magic_) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pc_map_table),
                "::",
                stringify!(magic_)
            )
        );
    }
    test_field_magic_();
    fn test_field_ver_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pc_map_table>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ver_) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(pc_map_table),
                "::",
                stringify!(ver_)
            )
        );
    }
    test_field_ver_();
    fn test_field_type_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pc_map_table>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(pc_map_table),
                "::",
                stringify!(type_)
            )
        );
    }
    test_field_type_();
    fn test_field_size_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pc_map_table>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).size_) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(pc_map_table),
                "::",
                stringify!(size_)
            )
        );
    }
    test_field_size_();
    fn test_field_num_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pc_map_table>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).num_) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(pc_map_table),
                "::",
                stringify!(num_)
            )
        );
    }
    test_field_num_();
    fn test_field_unused_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pc_map_table>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).unused_) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(pc_map_table),
                "::",
                stringify!(unused_)
            )
        );
    }
    test_field_unused_();
    fn test_field_next_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pc_map_table>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).next_) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(pc_map_table),
                "::",
                stringify!(next_)
            )
        );
    }
    test_field_next_();
    fn test_field_prod_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pc_map_table>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).prod_) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(pc_map_table),
                "::",
                stringify!(prod_)
            )
        );
    }
    test_field_prod_();
}
pub type pc_map_table_t = pc_map_table;
#[repr(C)]
#[derive(Debug)]
pub struct pc_str {
    pub len_: u8,
    pub data_: __IncompleteArrayField<::std::os::raw::c_char>,
}
#[test]
fn bindgen_test_layout_pc_str() {
    assert_eq!(
        ::std::mem::size_of::<pc_str>(),
        1usize,
        concat!("Size of: ", stringify!(pc_str))
    );
    assert_eq!(
        ::std::mem::align_of::<pc_str>(),
        1usize,
        concat!("Alignment of ", stringify!(pc_str))
    );
    fn test_field_len_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pc_str>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).len_) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pc_str),
                "::",
                stringify!(len_)
            )
        );
    }
    test_field_len_();
    fn test_field_data_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pc_str>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).data_) as usize - ptr as usize
            },
            1usize,
            concat!(
                "Offset of field: ",
                stringify!(pc_str),
                "::",
                stringify!(data_)
            )
        );
    }
    test_field_data_();
}
pub type pc_str_t = pc_str;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pc_prod {
    pub magic_: u32,
    pub ver_: u32,
    pub type_: u32,
    pub size_: u32,
    pub px_acc_: pc_pub_key_t,
}
#[test]
fn bindgen_test_layout_pc_prod() {
    assert_eq!(
        ::std::mem::size_of::<pc_prod>(),
        48usize,
        concat!("Size of: ", stringify!(pc_prod))
    );
    assert_eq!(
        ::std::mem::align_of::<pc_prod>(),
        8usize,
        concat!("Alignment of ", stringify!(pc_prod))
    );
    fn test_field_magic_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pc_prod>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).magic_) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pc_prod),
                "::",
                stringify!(magic_)
            )
        );
    }
    test_field_magic_();
    fn test_field_ver_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pc_prod>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ver_) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(pc_prod),
                "::",
                stringify!(ver_)
            )
        );
    }
    test_field_ver_();
    fn test_field_type_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pc_prod>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(pc_prod),
                "::",
                stringify!(type_)
            )
        );
    }
    test_field_type_();
    fn test_field_size_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pc_prod>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).size_) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(pc_prod),
                "::",
                stringify!(size_)
            )
        );
    }
    test_field_size_();
    fn test_field_px_acc_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pc_prod>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).px_acc_) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(pc_prod),
                "::",
                stringify!(px_acc_)
            )
        );
    }
    test_field_px_acc_();
}
pub type pc_prod_t = pc_prod;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pc_price_info {
    pub price_: i64,
    pub conf_: u64,
    pub status_: u32,
    pub corp_act_status_: u32,
    pub pub_slot_: u64,
}
#[test]
fn bindgen_test_layout_pc_price_info() {
    assert_eq!(
        ::std::mem::size_of::<pc_price_info>(),
        32usize,
        concat!("Size of: ", stringify!(pc_price_info))
    );
    assert_eq!(
        ::std::mem::align_of::<pc_price_info>(),
        8usize,
        concat!("Alignment of ", stringify!(pc_price_info))
    );
    fn test_field_price_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pc_price_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).price_) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pc_price_info),
                "::",
                stringify!(price_)
            )
        );
    }
    test_field_price_();
    fn test_field_conf_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pc_price_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).conf_) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(pc_price_info),
                "::",
                stringify!(conf_)
            )
        );
    }
    test_field_conf_();
    fn test_field_status_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pc_price_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).status_) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(pc_price_info),
                "::",
                stringify!(status_)
            )
        );
    }
    test_field_status_();
    fn test_field_corp_act_status_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pc_price_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).corp_act_status_) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(pc_price_info),
                "::",
                stringify!(corp_act_status_)
            )
        );
    }
    test_field_corp_act_status_();
    fn test_field_pub_slot_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pc_price_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pub_slot_) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(pc_price_info),
                "::",
                stringify!(pub_slot_)
            )
        );
    }
    test_field_pub_slot_();
}
pub type pc_price_info_t = pc_price_info;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pc_price_comp {
    pub pub_: pc_pub_key_t,
    pub agg_: pc_price_info_t,
    pub latest_: pc_price_info_t,
}
#[test]
fn bindgen_test_layout_pc_price_comp() {
    assert_eq!(
        ::std::mem::size_of::<pc_price_comp>(),
        96usize,
        concat!("Size of: ", stringify!(pc_price_comp))
    );
    assert_eq!(
        ::std::mem::align_of::<pc_price_comp>(),
        8usize,
        concat!("Alignment of ", stringify!(pc_price_comp))
    );
    fn test_field_pub_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pc_price_comp>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pub_) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pc_price_comp),
                "::",
                stringify!(pub_)
            )
        );
    }
    test_field_pub_();
    fn test_field_agg_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pc_price_comp>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).agg_) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(pc_price_comp),
                "::",
                stringify!(agg_)
            )
        );
    }
    test_field_agg_();
    fn test_field_latest_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pc_price_comp>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).latest_) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(pc_price_comp),
                "::",
                stringify!(latest_)
            )
        );
    }
    test_field_latest_();
}
pub type pc_price_comp_t = pc_price_comp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pc_ema {
    pub val_: i64,
    pub numer_: i64,
    pub denom_: i64,
}
#[test]
fn bindgen_test_layout_pc_ema() {
    assert_eq!(
        ::std::mem::size_of::<pc_ema>(),
        24usize,
        concat!("Size of: ", stringify!(pc_ema))
    );
    assert_eq!(
        ::std::mem::align_of::<pc_ema>(),
        8usize,
        concat!("Alignment of ", stringify!(pc_ema))
    );
    fn test_field_val_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pc_ema>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).val_) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pc_ema),
                "::",
                stringify!(val_)
            )
        );
    }
    test_field_val_();
    fn test_field_numer_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pc_ema>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).numer_) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(pc_ema),
                "::",
                stringify!(numer_)
            )
        );
    }
    test_field_numer_();
    fn test_field_denom_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pc_ema>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).denom_) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(pc_ema),
                "::",
                stringify!(denom_)
            )
        );
    }
    test_field_denom_();
}
pub type pc_ema_t = pc_ema;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pc_price {
    pub magic_: u32,
    pub ver_: u32,
    pub type_: u32,
    pub size_: u32,
    pub ptype_: u32,
    pub expo_: i32,
    pub num_: u32,
    pub num_qt_: u32,
    pub last_slot_: u64,
    pub valid_slot_: u64,
    pub twap_: pc_ema_t,
    pub twac_: pc_ema_t,
    pub timestamp_: i64,
    pub min_pub_: u8,
    pub drv2_: i8,
    pub drv3_: i16,
    pub drv4_: i32,
    pub prod_: pc_pub_key_t,
    pub next_: pc_pub_key_t,
    pub prev_slot_: u64,
    pub prev_price_: i64,
    pub prev_conf_: u64,
    pub prev_timestamp_: i64,
    pub agg_: pc_price_info_t,
    pub comp_: [pc_price_comp_t; 32usize],
}
#[test]
fn bindgen_test_layout_pc_price() {
    assert_eq!(
        ::std::mem::size_of::<pc_price>(),
        3312usize,
        concat!("Size of: ", stringify!(pc_price))
    );
    assert_eq!(
        ::std::mem::align_of::<pc_price>(),
        8usize,
        concat!("Alignment of ", stringify!(pc_price))
    );
    fn test_field_magic_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pc_price>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).magic_) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pc_price),
                "::",
                stringify!(magic_)
            )
        );
    }
    test_field_magic_();
    fn test_field_ver_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pc_price>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ver_) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(pc_price),
                "::",
                stringify!(ver_)
            )
        );
    }
    test_field_ver_();
    fn test_field_type_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pc_price>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(pc_price),
                "::",
                stringify!(type_)
            )
        );
    }
    test_field_type_();
    fn test_field_size_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pc_price>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).size_) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(pc_price),
                "::",
                stringify!(size_)
            )
        );
    }
    test_field_size_();
    fn test_field_ptype_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pc_price>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ptype_) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(pc_price),
                "::",
                stringify!(ptype_)
            )
        );
    }
    test_field_ptype_();
    fn test_field_expo_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pc_price>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).expo_) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(pc_price),
                "::",
                stringify!(expo_)
            )
        );
    }
    test_field_expo_();
    fn test_field_num_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pc_price>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).num_) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(pc_price),
                "::",
                stringify!(num_)
            )
        );
    }
    test_field_num_();
    fn test_field_num_qt_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pc_price>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).num_qt_) as usize - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(pc_price),
                "::",
                stringify!(num_qt_)
            )
        );
    }
    test_field_num_qt_();
    fn test_field_last_slot_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pc_price>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).last_slot_) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(pc_price),
                "::",
                stringify!(last_slot_)
            )
        );
    }
    test_field_last_slot_();
    fn test_field_valid_slot_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pc_price>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).valid_slot_) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(pc_price),
                "::",
                stringify!(valid_slot_)
            )
        );
    }
    test_field_valid_slot_();
    fn test_field_twap_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pc_price>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).twap_) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(pc_price),
                "::",
                stringify!(twap_)
            )
        );
    }
    test_field_twap_();
    fn test_field_twac_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pc_price>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).twac_) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(pc_price),
                "::",
                stringify!(twac_)
            )
        );
    }
    test_field_twac_();
    fn test_field_timestamp_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pc_price>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).timestamp_) as usize - ptr as usize
            },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(pc_price),
                "::",
                stringify!(timestamp_)
            )
        );
    }
    test_field_timestamp_();
    fn test_field_min_pub_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pc_price>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).min_pub_) as usize - ptr as usize
            },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(pc_price),
                "::",
                stringify!(min_pub_)
            )
        );
    }
    test_field_min_pub_();
    fn test_field_drv2_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pc_price>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).drv2_) as usize - ptr as usize
            },
            105usize,
            concat!(
                "Offset of field: ",
                stringify!(pc_price),
                "::",
                stringify!(drv2_)
            )
        );
    }
    test_field_drv2_();
    fn test_field_drv3_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pc_price>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).drv3_) as usize - ptr as usize
            },
            106usize,
            concat!(
                "Offset of field: ",
                stringify!(pc_price),
                "::",
                stringify!(drv3_)
            )
        );
    }
    test_field_drv3_();
    fn test_field_drv4_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pc_price>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).drv4_) as usize - ptr as usize
            },
            108usize,
            concat!(
                "Offset of field: ",
                stringify!(pc_price),
                "::",
                stringify!(drv4_)
            )
        );
    }
    test_field_drv4_();
    fn test_field_prod_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pc_price>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).prod_) as usize - ptr as usize
            },
            112usize,
            concat!(
                "Offset of field: ",
                stringify!(pc_price),
                "::",
                stringify!(prod_)
            )
        );
    }
    test_field_prod_();
    fn test_field_next_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pc_price>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).next_) as usize - ptr as usize
            },
            144usize,
            concat!(
                "Offset of field: ",
                stringify!(pc_price),
                "::",
                stringify!(next_)
            )
        );
    }
    test_field_next_();
    fn test_field_prev_slot_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pc_price>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).prev_slot_) as usize - ptr as usize
            },
            176usize,
            concat!(
                "Offset of field: ",
                stringify!(pc_price),
                "::",
                stringify!(prev_slot_)
            )
        );
    }
    test_field_prev_slot_();
    fn test_field_prev_price_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pc_price>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).prev_price_) as usize - ptr as usize
            },
            184usize,
            concat!(
                "Offset of field: ",
                stringify!(pc_price),
                "::",
                stringify!(prev_price_)
            )
        );
    }
    test_field_prev_price_();
    fn test_field_prev_conf_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pc_price>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).prev_conf_) as usize - ptr as usize
            },
            192usize,
            concat!(
                "Offset of field: ",
                stringify!(pc_price),
                "::",
                stringify!(prev_conf_)
            )
        );
    }
    test_field_prev_conf_();
    fn test_field_prev_timestamp_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pc_price>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).prev_timestamp_) as usize - ptr as usize
            },
            200usize,
            concat!(
                "Offset of field: ",
                stringify!(pc_price),
                "::",
                stringify!(prev_timestamp_)
            )
        );
    }
    test_field_prev_timestamp_();
    fn test_field_agg_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pc_price>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).agg_) as usize - ptr as usize
            },
            208usize,
            concat!(
                "Offset of field: ",
                stringify!(pc_price),
                "::",
                stringify!(agg_)
            )
        );
    }
    test_field_agg_();
    fn test_field_comp_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pc_price>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).comp_) as usize - ptr as usize
            },
            240usize,
            concat!(
                "Offset of field: ",
                stringify!(pc_price),
                "::",
                stringify!(comp_)
            )
        );
    }
    test_field_comp_();
}
pub type pc_price_t = pc_price;
pub const command_t_e_cmd_init_mapping: command_t = 0;
pub const command_t_e_cmd_add_mapping: command_t = 1;
pub const command_t_e_cmd_add_product: command_t = 2;
pub const command_t_e_cmd_upd_product: command_t = 3;
pub const command_t_e_cmd_add_price: command_t = 4;
pub const command_t_e_cmd_add_publisher: command_t = 5;
pub const command_t_e_cmd_del_publisher: command_t = 6;
pub const command_t_e_cmd_upd_price: command_t = 7;
pub const command_t_e_cmd_agg_price: command_t = 8;
pub const command_t_e_cmd_init_price: command_t = 9;
pub const command_t_e_cmd_init_test: command_t = 10;
pub const command_t_e_cmd_upd_test: command_t = 11;
pub const command_t_e_cmd_set_min_pub: command_t = 12;
pub const command_t_e_cmd_upd_price_no_fail_on_error: command_t = 13;
pub type command_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cmd_hdr {
    pub ver_: u32,
    pub cmd_: i32,
}
#[test]
fn bindgen_test_layout_cmd_hdr() {
    assert_eq!(
        ::std::mem::size_of::<cmd_hdr>(),
        8usize,
        concat!("Size of: ", stringify!(cmd_hdr))
    );
    assert_eq!(
        ::std::mem::align_of::<cmd_hdr>(),
        4usize,
        concat!("Alignment of ", stringify!(cmd_hdr))
    );
    fn test_field_ver_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cmd_hdr>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ver_) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cmd_hdr),
                "::",
                stringify!(ver_)
            )
        );
    }
    test_field_ver_();
    fn test_field_cmd_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cmd_hdr>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cmd_) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(cmd_hdr),
                "::",
                stringify!(cmd_)
            )
        );
    }
    test_field_cmd_();
}
pub type cmd_hdr_t = cmd_hdr;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cmd_add_product {
    pub ver_: u32,
    pub cmd_: i32,
}
#[test]
fn bindgen_test_layout_cmd_add_product() {
    assert_eq!(
        ::std::mem::size_of::<cmd_add_product>(),
        8usize,
        concat!("Size of: ", stringify!(cmd_add_product))
    );
    assert_eq!(
        ::std::mem::align_of::<cmd_add_product>(),
        4usize,
        concat!("Alignment of ", stringify!(cmd_add_product))
    );
    fn test_field_ver_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cmd_add_product>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ver_) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cmd_add_product),
                "::",
                stringify!(ver_)
            )
        );
    }
    test_field_ver_();
    fn test_field_cmd_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cmd_add_product>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cmd_) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(cmd_add_product),
                "::",
                stringify!(cmd_)
            )
        );
    }
    test_field_cmd_();
}
pub type cmd_add_product_t = cmd_add_product;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cmd_upd_product {
    pub ver_: u32,
    pub cmd_: i32,
}
#[test]
fn bindgen_test_layout_cmd_upd_product() {
    assert_eq!(
        ::std::mem::size_of::<cmd_upd_product>(),
        8usize,
        concat!("Size of: ", stringify!(cmd_upd_product))
    );
    assert_eq!(
        ::std::mem::align_of::<cmd_upd_product>(),
        4usize,
        concat!("Alignment of ", stringify!(cmd_upd_product))
    );
    fn test_field_ver_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cmd_upd_product>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ver_) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cmd_upd_product),
                "::",
                stringify!(ver_)
            )
        );
    }
    test_field_ver_();
    fn test_field_cmd_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cmd_upd_product>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cmd_) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(cmd_upd_product),
                "::",
                stringify!(cmd_)
            )
        );
    }
    test_field_cmd_();
}
pub type cmd_upd_product_t = cmd_upd_product;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cmd_add_price {
    pub ver_: u32,
    pub cmd_: i32,
    pub expo_: i32,
    pub ptype_: u32,
}
#[test]
fn bindgen_test_layout_cmd_add_price() {
    assert_eq!(
        ::std::mem::size_of::<cmd_add_price>(),
        16usize,
        concat!("Size of: ", stringify!(cmd_add_price))
    );
    assert_eq!(
        ::std::mem::align_of::<cmd_add_price>(),
        4usize,
        concat!("Alignment of ", stringify!(cmd_add_price))
    );
    fn test_field_ver_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cmd_add_price>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ver_) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cmd_add_price),
                "::",
                stringify!(ver_)
            )
        );
    }
    test_field_ver_();
    fn test_field_cmd_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cmd_add_price>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cmd_) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(cmd_add_price),
                "::",
                stringify!(cmd_)
            )
        );
    }
    test_field_cmd_();
    fn test_field_expo_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cmd_add_price>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).expo_) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(cmd_add_price),
                "::",
                stringify!(expo_)
            )
        );
    }
    test_field_expo_();
    fn test_field_ptype_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cmd_add_price>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ptype_) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(cmd_add_price),
                "::",
                stringify!(ptype_)
            )
        );
    }
    test_field_ptype_();
}
pub type cmd_add_price_t = cmd_add_price;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cmd_init_price {
    pub ver_: u32,
    pub cmd_: i32,
    pub expo_: i32,
    pub ptype_: u32,
}
#[test]
fn bindgen_test_layout_cmd_init_price() {
    assert_eq!(
        ::std::mem::size_of::<cmd_init_price>(),
        16usize,
        concat!("Size of: ", stringify!(cmd_init_price))
    );
    assert_eq!(
        ::std::mem::align_of::<cmd_init_price>(),
        4usize,
        concat!("Alignment of ", stringify!(cmd_init_price))
    );
    fn test_field_ver_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cmd_init_price>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ver_) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cmd_init_price),
                "::",
                stringify!(ver_)
            )
        );
    }
    test_field_ver_();
    fn test_field_cmd_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cmd_init_price>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cmd_) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(cmd_init_price),
                "::",
                stringify!(cmd_)
            )
        );
    }
    test_field_cmd_();
    fn test_field_expo_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cmd_init_price>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).expo_) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(cmd_init_price),
                "::",
                stringify!(expo_)
            )
        );
    }
    test_field_expo_();
    fn test_field_ptype_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cmd_init_price>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ptype_) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(cmd_init_price),
                "::",
                stringify!(ptype_)
            )
        );
    }
    test_field_ptype_();
}
pub type cmd_init_price_t = cmd_init_price;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cmd_set_min_pub {
    pub ver_: u32,
    pub cmd_: i32,
    pub min_pub_: u8,
}
#[test]
fn bindgen_test_layout_cmd_set_min_pub() {
    assert_eq!(
        ::std::mem::size_of::<cmd_set_min_pub>(),
        12usize,
        concat!("Size of: ", stringify!(cmd_set_min_pub))
    );
    assert_eq!(
        ::std::mem::align_of::<cmd_set_min_pub>(),
        4usize,
        concat!("Alignment of ", stringify!(cmd_set_min_pub))
    );
    fn test_field_ver_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cmd_set_min_pub>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ver_) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cmd_set_min_pub),
                "::",
                stringify!(ver_)
            )
        );
    }
    test_field_ver_();
    fn test_field_cmd_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cmd_set_min_pub>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cmd_) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(cmd_set_min_pub),
                "::",
                stringify!(cmd_)
            )
        );
    }
    test_field_cmd_();
    fn test_field_min_pub_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cmd_set_min_pub>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).min_pub_) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(cmd_set_min_pub),
                "::",
                stringify!(min_pub_)
            )
        );
    }
    test_field_min_pub_();
}
pub type cmd_set_min_pub_t = cmd_set_min_pub;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cmd_add_publisher {
    pub ver_: u32,
    pub cmd_: i32,
    pub pub_: pc_pub_key_t,
}
#[test]
fn bindgen_test_layout_cmd_add_publisher() {
    assert_eq!(
        ::std::mem::size_of::<cmd_add_publisher>(),
        40usize,
        concat!("Size of: ", stringify!(cmd_add_publisher))
    );
    assert_eq!(
        ::std::mem::align_of::<cmd_add_publisher>(),
        8usize,
        concat!("Alignment of ", stringify!(cmd_add_publisher))
    );
    fn test_field_ver_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cmd_add_publisher>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ver_) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cmd_add_publisher),
                "::",
                stringify!(ver_)
            )
        );
    }
    test_field_ver_();
    fn test_field_cmd_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cmd_add_publisher>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cmd_) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(cmd_add_publisher),
                "::",
                stringify!(cmd_)
            )
        );
    }
    test_field_cmd_();
    fn test_field_pub_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cmd_add_publisher>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pub_) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(cmd_add_publisher),
                "::",
                stringify!(pub_)
            )
        );
    }
    test_field_pub_();
}
pub type cmd_add_publisher_t = cmd_add_publisher;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cmd_del_publisher {
    pub ver_: u32,
    pub cmd_: i32,
    pub pub_: pc_pub_key_t,
}
#[test]
fn bindgen_test_layout_cmd_del_publisher() {
    assert_eq!(
        ::std::mem::size_of::<cmd_del_publisher>(),
        40usize,
        concat!("Size of: ", stringify!(cmd_del_publisher))
    );
    assert_eq!(
        ::std::mem::align_of::<cmd_del_publisher>(),
        8usize,
        concat!("Alignment of ", stringify!(cmd_del_publisher))
    );
    fn test_field_ver_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cmd_del_publisher>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ver_) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cmd_del_publisher),
                "::",
                stringify!(ver_)
            )
        );
    }
    test_field_ver_();
    fn test_field_cmd_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cmd_del_publisher>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cmd_) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(cmd_del_publisher),
                "::",
                stringify!(cmd_)
            )
        );
    }
    test_field_cmd_();
    fn test_field_pub_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cmd_del_publisher>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pub_) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(cmd_del_publisher),
                "::",
                stringify!(pub_)
            )
        );
    }
    test_field_pub_();
}
pub type cmd_del_publisher_t = cmd_del_publisher;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cmd_upd_price {
    pub ver_: u32,
    pub cmd_: i32,
    pub status_: u32,
    pub unused_: u32,
    pub price_: i64,
    pub conf_: u64,
    pub pub_slot_: u64,
}
#[test]
fn bindgen_test_layout_cmd_upd_price() {
    assert_eq!(
        ::std::mem::size_of::<cmd_upd_price>(),
        40usize,
        concat!("Size of: ", stringify!(cmd_upd_price))
    );
    assert_eq!(
        ::std::mem::align_of::<cmd_upd_price>(),
        8usize,
        concat!("Alignment of ", stringify!(cmd_upd_price))
    );
    fn test_field_ver_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cmd_upd_price>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ver_) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cmd_upd_price),
                "::",
                stringify!(ver_)
            )
        );
    }
    test_field_ver_();
    fn test_field_cmd_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cmd_upd_price>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cmd_) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(cmd_upd_price),
                "::",
                stringify!(cmd_)
            )
        );
    }
    test_field_cmd_();
    fn test_field_status_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cmd_upd_price>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).status_) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(cmd_upd_price),
                "::",
                stringify!(status_)
            )
        );
    }
    test_field_status_();
    fn test_field_unused_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cmd_upd_price>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).unused_) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(cmd_upd_price),
                "::",
                stringify!(unused_)
            )
        );
    }
    test_field_unused_();
    fn test_field_price_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cmd_upd_price>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).price_) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(cmd_upd_price),
                "::",
                stringify!(price_)
            )
        );
    }
    test_field_price_();
    fn test_field_conf_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cmd_upd_price>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).conf_) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(cmd_upd_price),
                "::",
                stringify!(conf_)
            )
        );
    }
    test_field_conf_();
    fn test_field_pub_slot_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cmd_upd_price>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pub_slot_) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(cmd_upd_price),
                "::",
                stringify!(pub_slot_)
            )
        );
    }
    test_field_pub_slot_();
}
pub type cmd_upd_price_t = cmd_upd_price;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cmd_upd_test {
    pub ver_: u32,
    pub cmd_: i32,
    pub num_: u32,
    pub expo_: i32,
    pub slot_diff_: [i8; 32usize],
    pub price_: [i64; 32usize],
    pub conf_: [u64; 32usize],
}
#[test]
fn bindgen_test_layout_cmd_upd_test() {
    assert_eq!(
        ::std::mem::size_of::<cmd_upd_test>(),
        560usize,
        concat!("Size of: ", stringify!(cmd_upd_test))
    );
    assert_eq!(
        ::std::mem::align_of::<cmd_upd_test>(),
        8usize,
        concat!("Alignment of ", stringify!(cmd_upd_test))
    );
    fn test_field_ver_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cmd_upd_test>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ver_) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cmd_upd_test),
                "::",
                stringify!(ver_)
            )
        );
    }
    test_field_ver_();
    fn test_field_cmd_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cmd_upd_test>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cmd_) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(cmd_upd_test),
                "::",
                stringify!(cmd_)
            )
        );
    }
    test_field_cmd_();
    fn test_field_num_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cmd_upd_test>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).num_) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(cmd_upd_test),
                "::",
                stringify!(num_)
            )
        );
    }
    test_field_num_();
    fn test_field_expo_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cmd_upd_test>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).expo_) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(cmd_upd_test),
                "::",
                stringify!(expo_)
            )
        );
    }
    test_field_expo_();
    fn test_field_slot_diff_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cmd_upd_test>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).slot_diff_) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(cmd_upd_test),
                "::",
                stringify!(slot_diff_)
            )
        );
    }
    test_field_slot_diff_();
    fn test_field_price_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cmd_upd_test>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).price_) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(cmd_upd_test),
                "::",
                stringify!(price_)
            )
        );
    }
    test_field_price_();
    fn test_field_conf_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cmd_upd_test>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).conf_) as usize - ptr as usize
            },
            304usize,
            concat!(
                "Offset of field: ",
                stringify!(cmd_upd_test),
                "::",
                stringify!(conf_)
            )
        );
    }
    test_field_conf_();
}
pub type cmd_upd_test_t = cmd_upd_test;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sysvar_clock {
    pub slot_: u64,
    pub epoch_start_timestamp_: i64,
    pub epoch_: u64,
    pub leader_schedule_epoch_: u64,
    pub unix_timestamp_: i64,
}
#[test]
fn bindgen_test_layout_sysvar_clock() {
    assert_eq!(
        ::std::mem::size_of::<sysvar_clock>(),
        40usize,
        concat!("Size of: ", stringify!(sysvar_clock))
    );
    assert_eq!(
        ::std::mem::align_of::<sysvar_clock>(),
        8usize,
        concat!("Alignment of ", stringify!(sysvar_clock))
    );
    fn test_field_slot_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sysvar_clock>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).slot_) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(sysvar_clock),
                "::",
                stringify!(slot_)
            )
        );
    }
    test_field_slot_();
    fn test_field_epoch_start_timestamp_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sysvar_clock>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).epoch_start_timestamp_) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(sysvar_clock),
                "::",
                stringify!(epoch_start_timestamp_)
            )
        );
    }
    test_field_epoch_start_timestamp_();
    fn test_field_epoch_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sysvar_clock>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).epoch_) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(sysvar_clock),
                "::",
                stringify!(epoch_)
            )
        );
    }
    test_field_epoch_();
    fn test_field_leader_schedule_epoch_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sysvar_clock>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).leader_schedule_epoch_) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(sysvar_clock),
                "::",
                stringify!(leader_schedule_epoch_)
            )
        );
    }
    test_field_leader_schedule_epoch_();
    fn test_field_unix_timestamp_() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<sysvar_clock>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).unix_timestamp_) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(sysvar_clock),
                "::",
                stringify!(unix_timestamp_)
            )
        );
    }
    test_field_unix_timestamp_();
}
pub type sysvar_clock_t = sysvar_clock;
